---
- name: Set up RHEL and Provision Etherpad
  hosts: localhost
  connection: local


  tasks:

    - name: Create AWS VPC {{ ec2_name_prefix }}-vpc
      ec2_vpc_net:
        name: "{{ ec2_name_prefix }}-vpc"
        cidr_block: "{{ec2_subnet}}"
        region: "{{ ec2_region }}"
        tags:
          Name: "{{ ec2_name_prefix }}"
      register: create_vpc
      when: ec2_vpc_id is undefined
      until: create_vpc is not failed
      retries: 5

    - name: Create subnet for {{ ec2_name_prefix }}-vpc
      ec2_vpc_subnet:
        region: "{{ ec2_region }}"
        az: "{{ ec2_az }}"
        vpc_id: "{{ create_vpc.vpc.id }}"
        cidr: "{{ ec2_subnet }}"
        wait_timeout: 600
        resource_tags:
          Name: "{{ ec2_name_prefix }}"
      register: create_subnet
      when: ec2_vpc_id is undefined
      until: create_subnet is not failed
      retries: 15

    - name: Create EC2 security group for VPC named {{ ec2_name_prefix }}-vpc
      ec2_group:
        name: "{{ ec2_name_prefix }}-etherpad"
        description: Etherpad Ports Open
        region: "{{ ec2_region }}"
        vpc_id: "{{create_vpc.vpc.id}}"
        tags:
          Name: "{{ ec2_name_prefix }}"
        rules:
          - proto: tcp
            to_port: 443
            from_port: 443
            cidr_ip: 0.0.0.0/0
          - proto: icmp
            to_port: -1
            from_port: -1
            cidr_ip: 0.0.0.0/0
          - proto: tcp
            to_port: 80
            from_port: 80
            cidr_ip: 0.0.0.0/0
          - proto: tcp
            to_port: 22
            from_port: 22
            cidr_ip: 0.0.0.0/0
          - proto: tcp
            to_port: 9001
            from_port: 9001
            cidr_ip: 0.0.0.0/0
        rules_egress:
          - proto: all
            cidr_ip: 0.0.0.0/0
      when: ec2_vpc_id is undefined
      register: create_sg
      until: create_sg is not failed
      retries: 5

    - name: vpc internet gateway is present for {{ create_vpc.vpc.id }}
      ec2_vpc_igw:
        region: "{{ ec2_region }}"
        vpc_id: "{{ create_vpc.vpc.id }}"
        tags:
          Name: "{{ ec2_name_prefix }}"
      register: igw
      until: igw is not failed
      retries: 15
      when: ec2_vpc_id is undefined

    - name: vpc public subnet route table is present for {{ create_vpc.vpc.id }}
      ec2_vpc_route_table:
        region: "{{ ec2_region }}"
        vpc_id: "{{ create_vpc.vpc.id }}"
        subnets:
          - "{{ create_subnet.subnet.id }}"
        routes:
          - dest: 0.0.0.0/0
            gateway_id: "{{ igw.gateway_id }}"
        tags:
          Name: "{{ ec2_name_prefix }}"
      register: routetable
      until: routetable is not failed
      retries: 5
      when: ec2_vpc_id is undefined

    - name: set variables for instance creation dynamically since VPC was not supplied by user
      set_fact:
        ec2_vpc_id: "{{ create_vpc.vpc.id }}"
        ec2_security_group: "{{ ec2_name_prefix }}-etherpad"
        ec2_vpc_subnet_id: "{{ create_subnet.subnet.id }}"
      when: ec2_vpc_id is undefined

    - name: Create ssh key pair for workshop {{ ec2_name_prefix }}
      ec2_key:
        name: "{{ ec2_name_prefix }}-key"
        region: "{{ ec2_region }}"
      register: create_key

    - name: Create private_key directory
      file:
        path: "{{ playbook_dir }}/{{ec2_name_prefix}}"
        state: directory

    - name: save private key
      copy:
        content: "{{ create_key.key.private_key }}"
        dest: "{{ playbook_dir }}/{{ec2_name_prefix}}/{{ec2_name_prefix}}-private.pem"
        mode: '0400'
      #when: create_key.changed

    - name: find ami for RHEL
      ec2_ami_facts:
        region: "{{ ec2_region }}"
        owners: 309956199498
        filters:
          name: RHEL-7.4*GA*
          architecture: x86_64
      register: amis

    - name: save ami for node1
      set_fact:
        node1_ami: >
          {{ amis.images | selectattr('name', 'defined') | sort(attribute='creation_date') | last }}

    - name: Create EC2 instances for node1
      ec2:
        assign_public_ip: yes
        key_name: "{{ ec2_name_prefix }}-key"
        group: "{{ ec2_security_group }}"
        instance_type: t2.micro
        image: "{{ node1_ami.image_id }}"
        region: "{{ ec2_region }}"
        wait: "{{ ec2_wait }}"
        vpc_subnet_id: "{{ ec2_vpc_subnet_id }}"
        volumes:
          - device_name: /dev/sda1
            volume_type: gp2
            volume_size: 10
            delete_on_termination: true
      register: node1_output

    - name: Ensure tags are present for node1
      ec2_tag:
        region: "{{ ec2_region }}"
        resource: "{{item.1}}"
        state: present
        tags:
          Name: "{{ ec2_name_prefix }}-Etherpad"
          AWSPullTag: "{{ ec2_name_prefix }}"
      with_indexed_items:
        - "{{ node1_output.instance_ids }}"
      when: node1_output.instance_ids is not none
